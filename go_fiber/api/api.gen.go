// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
)

// Book defines model for Book.
type Book struct {
	Name string `json:"name"`
}

// BookResponse defines model for BookResponse.
type BookResponse struct {
	Code float32 `json:"code"`
	Data struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"data"`
	Message string `json:"message"`
}

// GlobalResponses defines model for GlobalResponses.
type GlobalResponses struct {
	ResponseCode    string `json:"responseCode"`
	ResponseMessage string `json:"responseMessage"`
}

// CheckOperationIdJSONRequestBody defines body for CheckOperationId for application/json ContentType.
type CheckOperationIdJSONRequestBody = Book

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Check summary
	// (POST /api/v1.0/book)
	CheckOperationId(c *fiber.Ctx) error
	// Check
	// (GET /api/v1.0/check)
	Check(c *fiber.Ctx) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// CheckOperationId operation middleware
func (siw *ServerInterfaceWrapper) CheckOperationId(c *fiber.Ctx) error {

	return siw.Handler.CheckOperationId(c)
}

// Check operation middleware
func (siw *ServerInterfaceWrapper) Check(c *fiber.Ctx) error {

	return siw.Handler.Check(c)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(m)
	}

	router.Post(options.BaseURL+"/api/v1.0/book", wrapper.CheckOperationId)

	router.Get(options.BaseURL+"/api/v1.0/check", wrapper.Check)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RUQW/bPAz9Kwa/72hH6XbTscXW9dAV2HYrclBk1lYjiZokdw0C//dBsp2kSTp0RXaS",
	"TYrk43sUNyDJOLJoYwC+gSBbNCJ/XhKt0uk8OfRRYbZaYTCd+CyM0wg83yu+CoPFp9FWQly75ArRK9tA",
	"35fg8WenPNbA74cci+0tWj6ijNCXOdU3DI5swOPSkupsHcNsZ5booYTnqqEqGauwUq4iFxVZoStHykb0",
	"wKPvsC+hFlEcZ1X1Xs4R8NtzTnS8L/6AF1VD+Qo5b0dkMATRnA9UZn0kb5f9lHrXmpZCT/qFY6r96Lp6",
	"KeRfkz7luT1zqy/wHZd5tyipjrIPlIBqJXGc7mF24PbmR2Ivqpif051wqkgIGrTFNWlhm+KzGib9CX1Q",
	"ZIHDxWw+m08AnJCrzAM0KrbdcibJMBJOVXLIw3xnozKYA/YdlVF1rfGX8Emhe7jd/sKiL4EcWuEUcPg4",
	"1nMitllLJpxiTxezOVtOe4JCTGdSXCQebmrgcNWiXN3tmQbKMcRLqtfDs7YRbQ4Vzmkl8032GFKj00ZK",
	"X/97fAAO/7HdymLjvmJ5WWWiawzSqywEcPgeyWORvftaHwxS7ujDfH5WONtF9mdYyRk6Y4RfT3QV03/y",
	"7YiWyZcqN/ga0fAPezp83ifa+oJCx7YYgJ5obIgJ6NMgA7/fQOc1cGhjdJwxTVLoNo1Rv+h/BwAA//+U",
	"K0sPmgYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
